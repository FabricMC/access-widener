plugins {
	id "java"
	id "java-library"
	id "checkstyle"
	id "maven-publish"
	id "me.modmuss50.remotesign" version "0.1.0"
	id "org.cadixdev.licenser" version "0.6.1"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group "net.fabricmc"
archivesBaseName = "access-widener"

def ENV = System.getenv()
version = "2.0.0"
logger.lifecycle("Building AccessWidener: " + version)

repositories {
	mavenCentral()

	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

dependencies {
	def asmVersion = "9.0"
	def junitVersion = "5.7.2"
	def assertJVersion = "3.20.2"

	api "org.ow2.asm:asm:$asmVersion"
	api "org.ow2.asm:asm-commons:$asmVersion" // For Remapper

	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
	testImplementation("org.assertj:assertj-core:$assertJVersion")
}

license {
	header project.file("HEADER")
	include "**/*.java"
}

checkstyle {
	configFile = project.file("checkstyle.xml")
	toolVersion = "8.43"
}

java {
	withSourcesJar()
}

test {
	useJUnitPlatform()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

if (ENV.SIGNING_SERVER) {
	remoteSign {
		requestUrl ENV.SIGNING_SERVER
		pgpAuthKey ENV.SIGNING_PGP_KEY
		jarAuthKey ENV.SIGNING_JAR_KEY

		sign (jar, javadocJar, sourcesJar)

		afterEvaluate {
			sign publishing.publications.mavenJava
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			if (ENV.SIGNING_SERVER) {
				artifact(signJar) {
					classifier null
				}

				artifact(signJavadocJar) {
					classifier "javadoc"
				}

				artifact(signSourcesJar) {
					classifier "sources"
				}
			} else {
				from components.java

				artifact(javadocJar)
			}

			pom {
				name = 'access-widener'
				description = 'Access widener provides a way to loosen the access limits of classes in a data drive manner.'
				url = 'https://github.com/FabricMC/access-widener'

				scm {
					connection = "scm:git:https://github.com/FabricMC/access-widener.git"
					developerConnection = "scm:git:git@github.com:FabricMC/access-widener.git"
					url = "https://github.com/FabricMC/access-widener"
				}

				issueManagement {
					system = "GitHub"
					url = "https://github.com/FabricMC/access-widener/issues"
				}

				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id = "modmuss50"
						name = "modmuss50"
						email = "modmuss50@fabricmc.net"
					}

					developer {
						id = "sfPlayer"
						name = "Player"
						email = "player@fabricmc.net"
					}
				}
			}
		}
	}

	repositories {
		mavenLocal()

		if (ENV.MAVEN_URL) {
			repositories.maven {
				name "fabric"
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}

		if (ENV.MAVEN_CENTRAL_URL) {
			repositories.maven {
				name "central"
				url ENV.MAVEN_CENTRAL_URL
				credentials {
					username ENV.MAVEN_CENTRAL_USERNAME
					password ENV.MAVEN_CENTRAL_PASSWORD
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/access-widener/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
